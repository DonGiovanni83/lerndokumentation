<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Way-Up 2020-2022</title>
    <description>Dokunentation meiner Ausbildung bei Puzzle ITC zum Systemtechniker EFZ.</description>
    <link></link>
    <atom:link href="/lerndokumentation/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 02 Nov 2020 02:11:36 +0000</pubDate>
    <lastBuildDate>Mon, 02 Nov 2020 02:11:36 +0000</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>Ubuntu-20.04 - User-Setup mit Ansible</title>
        <description>&lt;p&gt;Bei Puzzle ITC wird standardmässig Ubuntu als Betriebssystem eingesetzt. Bezieht ein Member ein neues
Notebook, erhält sie oder er ein Notebook mit einem Ubuntu welches den Puzzle-Bedürfnissen entsprechend vorkonfiguriert
ist. Dazu gehören zum Beispiel ein vorkonfiguriertes VPN, bereits installierte Druckertreiber und Drucker, internes Wifi schon
eingerichtet, Adminzugriff für den Support, Netzwerk shares eingerichtet sowie auch einen Puzzle-Brand-Touch am Gnome.&lt;/p&gt;

&lt;p&gt;Bestehend war das Staging-Setup für Ubuntu 18.04 LTS. Über den internen PXE Server konnte man das Ubuntu 18.04 LTS Image
und einige preseed-Files beziehen, welche den Installationsvorgang automatisieren sollten, sowie auch nach dem ersten
Einloggen des neuen Users weitere Puzzle-Konfigurations-Prozesse mit Ansible-Pull triggerten. Nun war mein Auftrag, infolge des Ubuntu LTS-Update
auf 20.04. das Setup der neuen Betriebssystem-Version anzupassen und, so weit möglich, zu vereinfachen.&lt;/p&gt;

&lt;p&gt;Dazu habe ich mich erstmals mit dem bestehenden Setup auseinandersetzen müssen, um zu sehen wie das Ganze zurzeit
funktionierte und anschliessend alle Schritte vom PXE-Boot bis zum Ansible-Setup dem neuen Betriebssystem anpassen.&lt;/p&gt;

&lt;p&gt;Mit allen Neuerungen und Anpassungen kann das bestehende Setup in folgenden Schritten abgebildet werden, welche ich 
anschliessend noch etwas genauer beschreiben werde, zusammenfasst werden:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/lerndokumentation/assets/images/pubuntu-setup-diagram.png&quot; alt=&quot;Pubuntu Setup Diagramm&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-pxe-boot--install-mit-preseed&quot;&gt;1. PXE Boot &amp;amp; Install mit preseed&lt;/h2&gt;

&lt;p&gt;Ist ein Notebook am internen Netz angeschlossen, kann vom internen Puzzle-PXE-Server die Ganze OS-‘Menukarte’ vom aus Notebook
abgiefragt werden. In diesem Menu existiert für das Ubuntu-20.04-Setup folgende Auswahl:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;...
menu PXE Boot Options
...
item pubuntu-net-20.04 Puzzle Ubuntu 20.04 installation
...

:pubuntu-net-20.04
set base-url http://archive.ubuntu.com/ubuntu/dists/focal-updates/main/installer-amd64/current/legacy-images/netboot/ubuntu-installer/amd64
kernel ${base-url}/linux
initrd ${base-url}/initrd.gz
imgargs linux initrd=initrd.gz auto=true fb=false priority=critical preseed/locale=en_US kbd-chooser/method=ch keymap=ch debian-installer/keymap=ch preseed/url=http:///pubuntu.seed
boot ||  

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Was nun bei der Auswahl von &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:pubuntu-net-20.04&lt;/code&gt; geschieht ist, dass das aktuelle Netboot-Installer aus dem Ubuntu-Archiv
heruntergeladen und mit den oben aufgelisteten &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imgargs&lt;/code&gt; ausgeführt. Wichtig ist hierbei des letzte Argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preseed/url&lt;/code&gt;.
Mit diesem Argument wird der Pfad zur Preseed-Datei angegeben, welche wir gleich genauer anschauen werden.&lt;/p&gt;

&lt;p&gt;Wurde der Netboot-Installer geladen, startet der debian-installer und die Installation beginnt. Normalerweise würd man an diesem
Punkt auf Konfigurationsfragen wie z.B. Tastatur-Layout, Netzwerk, Festplatten-Partitionierung und Verschlüsselung, Sprache
oder Benutzereinrichtung. Da aber die ganze Installation automatisiert sein soll, verwenden wir das oben erwähnte Preseed-File. Diese
Datei enthält alle Antworten auf die Fragen, welche der debian-installer während der Installation fragen wird plus noch einige 
Extra-Befehle die am Schluss der Installation ausgeführt werden um die Installation auf unsere Puzzle-Wünsche anzupassen.&lt;/p&gt;

&lt;p&gt;Wie ein solches Preseed-File ausswhen kann und wie man es zusammenstellt ist wird &lt;a href=&quot;https://help.ubuntu.com/lts/installation-guide/s390x/apb.html&quot;&gt;hier&lt;/a&gt; in der Ubuntu Dokumentation erklärt. Wichtig für unser Setup aber ist besonders diese Voreinstellung der Installation:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;d-i preseed/late_command string \
  modprobe nfs ;\
  mkdir /target/mnt/pubuntu /target/root/scripts ;\
  mount -t nfs -o port=2049,nolock,proto=tcp :/nfs/netboot/pubuntu /target/mnt/pubuntu ;\
  in-target rsync -av --progress /mnt/pubuntu/preseed/scripts/ /root/scripts/ ;\
  chmod +x /target/root/scripts/oem-setup.sh ;\
  chmod +x /target/root/scripts/user-setup.sh ;\
  chmod +x /target/root/scripts/wifi.sh ;\
  in-target /root/scripts/oem-setup.sh preseed

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Für unser automatisiertes Setup ist der letzte Befehtl &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preseed/late_command&lt;/code&gt; besonders wichtig. Was hier geschieht ist, dass
nach der Ubuntu Installation die nach dem &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; aufgeführten Befehle im neu installierten Betriebssystem ausgeführt werden.
In unserem Fall möchten wir am Schluss der Installation ein script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oem-setup.sh&lt;/code&gt; ausführen. Dafür muss dieses Skript zuerst 
im neuen System vorhanden und ausführbar vorliegen. Die ersten drei Befehle mounten den iPXE-Server von Puzzle und kopieren
anschliessend das &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oem-setup.sh&lt;/code&gt;-Skript sowie 2 weitere Skripts welche vom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oem-setup.sh&lt;/code&gt; benötigt werden auf das System.
Diese werden anschliessend ausführbar gemacht, und zuletzt wird das &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oem-setup.sh&lt;/code&gt;-Skript &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in-target&lt;/code&gt; oder im kontext des
neuen Betriebssystems (d.h. nicht im debian-installer) ausgeführt.&lt;/p&gt;

&lt;p&gt;Dieses Skript bringt uns in die Nächste Phase, das OEM-Setup von Ubuntu für Puzzle-Members.&lt;/p&gt;

&lt;h2 id=&quot;2-oem-setup&quot;&gt;2. OEM-Setup&lt;/h2&gt;

&lt;p&gt;Das Betriebssystem ist bereit, hat jedoch noch keine Benutzer. Das soll auch so bleiben, bis die Member das Notebook das erste
Mal in Empfang nehmen. Um nun Voreinstellungen vorzunehmen ohne selber zuerst einen User erstellen und anschliessend wieder
löschen zu müssen, verwenden wir den OEM-Mode. Hierbei wird der OEM-User erstellt, welchen wir benutzen, um alle Einstellungen
vorzunehmen, welche die Puzzle-Members bei einem neuen Notebook out-of-the-box vorfinden sollten. Im automatisierten Installations-
Prozess von Abschnitt 1, packen wir diese Einstellungen, welche der OEM-User vornehmen soll ins &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oem-setup.sh&lt;/code&gt;-Skript:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Runs initial oem user setup after first install.&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;readlink&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# write every shell output to terminal&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ex&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# preseed setup step&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;preseed&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/log/pubuntu-setup/
  /bin/bash &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/oem-setup.sh | &lt;span class=&quot;nb&quot;&gt;tee&lt;/span&gt; /var/log/pubuntu-setup/oem-setup.log
  &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/skel/.config/autostart/
  &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/skel/.config/autostart/puzzle-user-setup.desktop &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  [Desktop Entry]
  Type=Application
  Exec=gnome-terminal -x bash -c &quot;sudo /root/scripts/user-setup.sh start; exec bash;&quot;
  Hidden=false
  NoDisplay=false
  X-GNOME-Autostart-enabled=true
  Name[en_US]=Puzzle ITC ansible-pull
  Name=Puzzle ITC ansible-pull
  Comment[en_US]=OS setup to be triggered after first user login. Should be removed after first execution.
  Comment=
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Finish OEM setup and trigger 'new-user-boot'&lt;/span&gt;
  oem-config-prepare &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;3600

  &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Zuerst wird sichergestellt, dass die Ausführung dieses Skripts geloggt wird (Im System, nicht im Installations-Medium). Anschliessend
setzt der OEM-User den Ordner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/skel&lt;/code&gt; für das Setup der Members auf. Die Besonderheit an diesem Ordner ist, dass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useradd&lt;/code&gt; standardmässig
diesen ‘Skeleton’- oder Skelett-Ordner beim  Erstellen eines neuen Users um den Home-Directory des neuen Users zu erstellen. D.h. erstellt
man einen user &lt;em&gt;bob&lt;/em&gt; erstellt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useradd&lt;/code&gt; für &lt;em&gt;bob&lt;/em&gt; den Home-Ordner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/bob&lt;/code&gt; und kopiert alles vom Ordner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/skel&lt;/code&gt; nach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/bob&lt;/code&gt;.
Für unser automatisiertes Setup also sehr praktisch.&lt;/p&gt;

&lt;p&gt;Was wir im &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/skel&lt;/code&gt; machen, ist das Bash-Skript &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-setup.sh&lt;/code&gt; als Startup-Program dem zukünftigen User hinzuzufügen, damit schon beim ersten
Login dieses Skript ausgeführt wird.&lt;/p&gt;

&lt;p&gt;Ist nun das &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oem-setup.sh&lt;/code&gt;-Skript fertig, und der OEM-User nicht mehr gebraucht wird, sorgt der Befehl &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oem-config-prerare --quiet&lt;/code&gt;
dafür, dass beim nächsten Starten des Notebooks, der OEM-User gelöscht wird (inklusive Home-Directory) und der User sich selbst auf dem 
Gerät registrieren kann.&lt;/p&gt;

&lt;p&gt;Mit diesem letzten Befehl ist das Staging des Notebooks abgeschlossen, und der debian-installer fährt das Gerät herunter.&lt;/p&gt;

&lt;h2 id=&quot;3-user-registrierung&quot;&gt;3. User-Registrierung&lt;/h2&gt;

&lt;p&gt;Wird ein gestagtes Notebook deployed, wird der Member beim Aufstarten als Erstes aufgefordert sich als Benuzer zu erfassen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/lerndokumentation/assets/images/pubuntu-setup-create-user.png&quot; alt=&quot;Create User&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hat der Member sich fertig registriert und eingeloggt, wird automatisch das im Abschnitt 2 eingefügte Programm ausgeführt. Dieses Startup-Programm
führt dieses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-setup.sh&lt;/code&gt;-Skript aus:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ensure proper logging&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/log/pubuntu-setup/
  /bin/bash /root/scripts/user-setup.sh | &lt;span class=&quot;nb&quot;&gt;tee&lt;/span&gt; /var/log/pubuntu-setup/user-setup.log
  &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# check if there are any wifi devices&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;iw dev&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# if so configure wifi&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Wifi setup&quot;&lt;/span&gt;
  /root/scripts/wifi.sh
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;###### PUZZLE ENVIRONMENT ######&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;################################&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install minimal packages:&lt;/span&gt;
apt update &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  git &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  vim &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  xterm &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  zenity &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  ansible &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  metacity &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  openssh-server &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  cracklib-runtime

&lt;span class=&quot;c&quot;&gt;# output from bash in English&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export LANG=en_US.UTF-8'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/bash.bashrc

&lt;span class=&quot;c&quot;&gt;## prepare puzzle-ansible-pull ###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##################################&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/lib/ansible/local
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/puzzle-ansible/

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /usr/local/bin/puzzle-ansible-pull &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
#!/bin/bash
ansible-pull &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    -d /var/lib/ansible/local &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    -U git@ssh.gitlab.com:p_itc_sys/ubuntu-ansible &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    -C master &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    --key-file /etc/puzzle-ansible/staging_sshkey &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    --accept-host-key | tee /var/log/puzzle-ansible-pull.logs &amp;amp;&amp;amp;

    # disable user creation on puzzle-ansible-pull
    sed 's/create_user: true/create_user: false/' /etc/puzzle-ansible/user.yml &amp;gt; /etc/puzzle-ansible/user.yml
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /usr/local/bin/puzzle-ansible-pull

&lt;span class=&quot;c&quot;&gt;# copy key&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /root/scripts/staging_sshkey /etc/puzzle-ansible/staging_sshkey
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;600 /etc/puzzle-ansible/staging_sshkey

&lt;span class=&quot;c&quot;&gt;# save the installation date&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%c &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /root/install-date

&lt;span class=&quot;c&quot;&gt;### ansible-pull ###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;####################&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CURRENT_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;who&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print $1 }'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Configuring ansible pull for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CURRENT_USER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/puzzle-ansible/user.yml &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
---
# User configurations will only be applied if this var is set to true
create_user: true

# The following variables are only used for user configuration
user:
    # Username
    name: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CURRENT_USER&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    # Groupname
    group: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CURRENT_USER&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    # Ldap-Username
    ldapname: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CURRENT_USER&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    # Computername
    hostname: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CURRENT_USER&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;-puzzle
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;/usr/local/bin/puzzle-ansible-pull

&lt;span class=&quot;c&quot;&gt;# Clean up initial startup job if still exists&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /home/&lt;span class=&quot;nv&quot;&gt;$CURRENT_USER&lt;/span&gt;/.config/autostart/puzzle-user-setup.desktop

&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;---- Do you want to reboot now (y/n)?&quot;&lt;/span&gt; choice
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$choice&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
  &lt;/span&gt;y|Y &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;----------- Rebooting now. See you later! -----------&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;2
    reboot
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  n|N &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;invalid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dieses Skript ist nicht direkt zuständig für die Einrichtung des Notebooks, sondern
bereitet das Gerät vor für ein ansible-pull, welches die Konfigurationen auf dem Laptop durchführen wird.
Nach dieser Vorbereitung führt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-setup.sh&lt;/code&gt; das ansible-pull auch gleich aus.&lt;/p&gt;

&lt;p&gt;Wichtig ist auch, das Entfernen des laufenden Skripts aus den Auto-Start-Programmen damit, diese Konfiguration
beim nächsten Login nicht erneut durchgeführt wird.&lt;/p&gt;

&lt;h2 id=&quot;4-ansible-pull&quot;&gt;4. Ansible-Pull&lt;/h2&gt;
&lt;p&gt;Ansible-Pull wird verwendet um ein remote Ansible-Repo aun Node zu ziehen, wo anschliessend das Repo selbstständig
z.B. mittels Cron-Job upgedated und ausgeführt werden kann. Genau das passiert auch beim Puzzle-Ubuntu setup.
Das Ubuntu-Ansible-Repository wird von ansible-pull gepullt und ausgeführt. Hierbei wird folgendes gemacht:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Benötigte Software installieren&lt;/li&gt;
  &lt;li&gt;Ungebrauchte Software entfernen&lt;/li&gt;
  &lt;li&gt;ansible-pull Cron-Job einrichten&lt;/li&gt;
  &lt;li&gt;Den Benutzer durch einen Disk-Verschlüsselungs-Passwort-Wechsel führen&lt;/li&gt;
  &lt;li&gt;Puzzle-Branding, mit Fonts, Sperrbildschirm-, Hintergrunds- und Boot-Bildern einrichten&lt;/li&gt;
  &lt;li&gt;User-Backup einrichten&lt;/li&gt;
  &lt;li&gt;Nextcoud anbindung einrichten&lt;/li&gt;
  &lt;li&gt;Internes Wifi einrichten&lt;/li&gt;
  &lt;li&gt;VPN einrichten&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nach diesen Konfigurationsschritten ist das Betriebssystem fertig eingerichtet und das Gerät startet neu.&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
        <link>/lerndokumentation/2020/08/21/ubuntu-20.04-user-setup-mit-ansible/</link>
        <guid isPermaLink="true">/lerndokumentation/2020/08/21/ubuntu-20.04-user-setup-mit-ansible/</guid>
        
        <category>Ansible</category>
        
        <category>Ubuntu</category>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Ubuntu 20.04 - Bootable USB Key mit preseed</title>
        <description>
</description>
        <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
        <link>/lerndokumentation/2020/08/04/ubuntu-20.04-usb-preseed/</link>
        <guid isPermaLink="true">/lerndokumentation/2020/08/04/ubuntu-20.04-usb-preseed/</guid>
        
        <category>Ubuntu</category>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Playing with Prometheus</title>
        <description>&lt;p&gt;Nach der Theorie zu Prometheus und Grafana in den &lt;a href=&quot;/lerndokumentation/2020/07/24/sys-labs&quot;&gt;/sys-labs&lt;/a&gt; habe ich diese beiden Technologien in einem ganz einfachen Docker-Setup zusammen gespannt, um diese mal in der Praxis auszuprobieren und damit rum zu spielen.&lt;/p&gt;

&lt;p&gt;In einem Container soll eine Prometheus Server Instanz laufen, welche metrics von einem weiteren Container holen soll. Dieser Container ist ein Linux System mit dem Node Exporeter drauf welcher Prometheus daten zur verfügung stellt. Grafana soll in einem dritten Container laufen, wo dann der Prometheus Container als Data Source registriert werden soll, und in einem Dashboard die Daten visualisiert werden sollen.&lt;/p&gt;

&lt;p&gt;Im &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file sieht das Ganze wie folgt aus.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;prometheus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/prometheus:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./config:/etc/prometheus/&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data:/prometheus&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--config.file=/etc/prometheus/prometheus.yml'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--storage.tsdb.path=/home/prometheus'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;expose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9090&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9090:9090&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;target:target&lt;/span&gt;


  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;target&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/node-exporter:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;expose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9100&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9100:9100&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;grafana&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grafana&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grafana/grafana:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus:prometheus&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unless-stopped&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data/grafana:/var/lib/grafana&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;root&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3000:3000&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mit diesem Setup hatte ich die Möglichkeit verschiedenes auszuprobieren und lernen, wie z.B. das registrieren einer Data Source bei Grafana, das Erstellen oder Importieren eines Dashboards auch in Grafana oder auch Queries über den Prometheus Server auf die Targets abzusetzen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/lerndokumentation/assets/images/grafana-dashboard.png&quot; alt=&quot;Grafana Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bei diesem kleinen Experiment war nicht nur spannend zu sehen wie Prometheus und Grafana zusammen funktionieren, sondern auch das Konfigurieren der Docker-Container. Dabei war es wichtig die Container über die benötigten Ports füreinander erreichbar machen, damit jeder Container seine benötigten Informationen beim jeweiligen Container abholen kann.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
        <link>/lerndokumentation/2020/07/26/prometheus/</link>
        <guid isPermaLink="true">/lerndokumentation/2020/07/26/prometheus/</guid>
        
        <category>Prometheus</category>
        
        
      </item>
    
      <item>
        <title>/sys-labs</title>
        <description>&lt;p&gt;Als Einstieg in die Way-Up Lehre bei Puzzle, hat das interne Sys-Team /sys-labs
vorbereitet, welche die Grundlagen der Informatik behandeln und den Lernenden
auf grundlegende Tätigkeiten eines Systemadminsitrator bei Puzzle vorberetet.
Diese Labs setzen keine Linux-Vorkenntnisse voraus, deshalb waren einige der
Lab-Kapitel wiederholung für mich da ich schon Grundkenntnisse über Linux
mitbringe. Trotz meiner Vorkenntnissen gab es immer wieder interessante
Ergänzungen und Hintergrund-Infos. Hier einige /sys-labs konnte ich verschiedene
Bereiche einlesen und einarbeiten:&lt;/p&gt;

&lt;h2 id=&quot;1_commandline&quot;&gt;1_commandline&lt;/h2&gt;

&lt;p&gt;Das erste Kapitel hat die Grundlagen der Linux Kommandozeile abgedekt.
Angefangen mit grundlegenden Befehlen wie sich z.B. in der Ordnerstruktur zu
bewegen oder files erstellen und verschieben geht das Kapitel zu etwas
aufregenderen Tasks wie z.B. suchen von Files oder Ordner mit Regex ausdrücken.&lt;/p&gt;

&lt;p&gt;Weiter wurden im Kapitel Streams STDOUT STDIN und STDERR angeschaut. Hier war
interessant zu sehen wie man die einzelnen Streams unabhängig von einander
umleiten kann und auch mittels dem Pipeoperators komplexe Anreihungen von
Befehlen bilden kann.&lt;/p&gt;

&lt;h2 id=&quot;2_git&quot;&gt;2_git&lt;/h2&gt;
&lt;p&gt;Das Versionierungstool git wir im Nächsten Kapitel vorgestellt. Da mir dieses
Tool bereits vertraut ist, war im Kapitel zu Beginn vieles Repetition.
Neu dazulernen durfte ich die Art und Weise wie sich Git von anderen
Versionsverwaltungstools unerscheidet beim&lt;/p&gt;

&lt;h2 id=&quot;3_troubleshooting&quot;&gt;3_troubleshooting&lt;/h2&gt;

&lt;h2 id=&quot;4_ansible&quot;&gt;4_ansible&lt;/h2&gt;
&lt;p&gt;Um verschiedene Infrastrukturen automatisiert aufzusetzen und verwalten, wird
bei Puzzle Ansible eingesetzt. Deshalb gehören die ansible-labs auch zur
Grundausbildung eines Systemtechniker bei Puzzle. Mehr dazu, was ich in den
ansible-labs lernen konnte in einem weiteren &lt;a href=&quot;/lerndokumentation/2020/07/31/ansible-labs&quot;&gt;Post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;5_scripting&quot;&gt;5_scripting&lt;/h2&gt;
&lt;p&gt;Als Teil der sys-labs ist in diesem Kapitel angedacht das Skripten mit Bash zu
erlernen. Da aber die Unterlagen dieses Kapitels noch nicht bestehen, konnte ich
mit eigenen Skripts Lernen Bash auf meinem Ubuntu anzuwenden.&lt;/p&gt;

&lt;p&gt;Dazu habe ich einerseits während den Tests für das Puzzle-Ubuntu-Setup ein Skript
geschrieben, welches ein Ubuntu-Image baut mit preseed und andererseits, da ich
mit drei Monitoren arbeite, ein kleines Skript zum Einstellen der
Bildschirmhelligkeit aller Monitoren. Das Skript zum Puzzle-Ubuntu-Setup erkläre
ich in diesem &lt;a href=&quot;/lerndokumentation/2020/08/04/ubuntu-20.04-usb-preseed&quot;&gt;Post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mein Anforderung an das Skript &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brightness-controller&lt;/code&gt; war es, ja nach Parameter den man dem Skript
übergibt, alle mit dem Laptop verbundenen Displays heller oder dunkler zu machen.
Dazu habe ich als Erstes den Mechanismus implementier welcher überprüft, dass
das Skript richtig verwendet wird. Konkret heist das: Das Skript muss mit genau
einem Parameter ausgeführt werden. Ansonsten wird die Ausführung abgebrochen.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$#&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brightness-controller requires only one parameter&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nach dieser Überprüfung soll der &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brightness-controller&lt;/code&gt; alle am System
angeschlossenen Displays auslesen und in einem assoziativen Array Speichern.
Darin sollen jeweils die ID auf die aktuelle Helligkeit der Displays gemapt
werden.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Deklarieren des Arrays der Displays&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; displays

&lt;span class=&quot;c&quot;&gt;# Auslesen und verarbeiten der Display IDs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;DISP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;xrandr &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; connected&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Auslesen der momentanen Helligkeit von DISP&lt;/span&gt;
  displays[&lt;span class=&quot;nv&quot;&gt;$DISP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;bc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;xrandr &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DISP&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A5&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; * 10&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# Optional zum Debuggen&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# echo &quot;display: $DISP&quot;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# echo &quot;brightness: ${displays[$DISP]}&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sind die Display IDs und ihre aktuelle Helligkeit gespeichert, ist als Nächstes
zu überprüfen was für ein Parameter dem Skript mitgegeben wurde. Der
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brightness-controller&lt;/code&gt; soll nur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up&lt;/code&gt; und &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;down&lt;/code&gt; als Parameter akzeptieren. Also
überprüfen wir das als Nächstes:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;INPUT_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# check if input parameter is valid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT_COMMAND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
  &lt;/span&gt;up&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    ...
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  down&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    ...
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid parameter - only valid parameters are 'up' or 'down'&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hier können wir nun das Erhöhen oder Verringern der Bildschirmhelligkeit
implementieren. Mit dem tool xrandr, das wir zum Auslesen der Geräte ID
verwendet haben, können wir auch die Helligkeit der Bildschirme einstellen.
Hierbei ist einzig zu beachten, dass die Helligkeit zwischen 0 und 10.0 sein
muss:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;
...

  up&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Iteriere durch alle Displays im Array&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;DISP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!displays[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do
      &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;displays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DISP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# echo $VAL&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;# Falls die Helligkeit grösser gleich 10 ist&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# setze sie auf 10&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ge&lt;/span&gt; 10 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
      &lt;span class=&quot;c&quot;&gt;# ansonsten + 1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;bc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VAL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; + 1&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;# echo &quot;current VAL: $VAL&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;# Schreibe die Helligkeit auf DISP&lt;/span&gt;
      xrandr &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DISP&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--brightness&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;bc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VAL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; / 10&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;done
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Für &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;down&lt;/code&gt; kann es analog implementiert werden. Hier ist nur der
Wertebereich der Helligkeit anders zu überprüfen und dementsprechend
zu setzen:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;
...

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-le&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
      &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;bc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VAL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - 1&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nun kann das Skript ausgeführt werden mit dem gewünschten Parameter und die
Bildschirme sollten ihre Helligkeit dementsprechend anpassen.&lt;/p&gt;

&lt;p&gt;Damit das Skript nun nicht jedes Mal aus einem Terminal ausgeführt werden
muss, habe ich im Ubuntu 20.04 zwei Keyboard-Shortcuts welche das Skript
mit den Parametern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up&lt;/code&gt; oder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;down&lt;/code&gt; ausführen.&lt;/p&gt;

&lt;p&gt;Dazu kann man über die Gnome Einstellungen öffnen und danach entweder über
die Suche oder im Menu in die Sektion &lt;em&gt;Keyboard Shortucuts&lt;/em&gt; navigieren.
Scrollt man in der Liste bis ganz nach unten, kann nun einen Custom Shortcut
hinzufügen. Hier kann man nun dem Shortcut einen sinnvollen Namen vergeben wie
zum Beispiel &lt;em&gt;Increase brightness&lt;/em&gt; und in der zweiten Option &lt;em&gt;Command&lt;/em&gt; den Pfad
zu dem &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brightness-controller&lt;/code&gt; Skript und den gewünschten Parameter angeben.
Der Shortcut könnte Beispielsweise so aussehen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/lerndokumentation/assets/images/custom-keyboard-shortcut.png&quot; alt=&quot;Custom keyboard shortcut&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6_networking&quot;&gt;6_networking&lt;/h2&gt;
</description>
        <pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate>
        <link>/lerndokumentation/2020/07/24/sys-labs/</link>
        <guid isPermaLink="true">/lerndokumentation/2020/07/24/sys-labs/</guid>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>ansible-labs</title>
        <description>&lt;p&gt;Als Einstieg in Ansible hat Puzzle hausgemachte Ansible Techlabs.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
        <link>/lerndokumentation/2020/02/08/ansible-labs/</link>
        <guid isPermaLink="true">/lerndokumentation/2020/02/08/ansible-labs/</guid>
        
        <category>Ansible</category>
        
        
      </item>
    
  </channel>
</rss>
